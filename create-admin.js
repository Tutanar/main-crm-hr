// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
require('dotenv').config({ path: '.env.local' });

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
const crypto = require('crypto');

// –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ encryption.ts)
function generateSalt() {
  return crypto.randomBytes(32).toString('hex');
}

function hashPassword(password, salt) {
  const hash = crypto.pbkdf2Sync(password, salt, 100000, 64, 'sha512');
  return hash.toString('hex');
}

function createPasswordHash(password) {
  const salt = generateSalt();
  const hash = hashPassword(password, salt);
  return { hash, salt };
}

function generateSecurePassword(length = 16) {
  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
  let password = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = crypto.randomInt(0, charset.length);
    password += charset[randomIndex];
  }
  return password;
}

function validatePasswordStrength(password) {
  const feedback = [];
  let score = 0;
  
  if (password.length >= 12) {
    score += 2;
  } else if (password.length >= 8) {
    score += 1;
    feedback.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤');
  } else {
    feedback.push('–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
  }
  
  if (/[A-Z]/.test(password)) score += 1; else feedback.push('–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã');
  if (/[a-z]/.test(password)) score += 1; else feedback.push('–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã');
  if (/\d/.test(password)) score += 1; else feedback.push('–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã');
  if (/[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(password)) score += 1; else feedback.push('–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã');
  if (!/(.)\1{2,}/.test(password)) score += 1; else feedback.push('–ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤');
  
  const isValid = score >= 5;
  if (isValid) feedback.push('–ü–∞—Ä–æ–ª—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–π');
  
  return { isValid, score, feedback };
}

const HASURA_URL = process.env.HASURA_URL || 'https://api.skyr1m-f0r-n0rds.sbs/v1/graphql';
const HASURA_ADMIN_SECRET = process.env.HASURA_ADMIN_SECRET || '';

async function createNewAdmin() {
  console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  
  // –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminData = {
    email: 'admin@company.com',
    full_name: 'Admin Sony Ericson',
    role: 'admin',
    is_active: true,
    is_email_verified: true
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
  const password = generateSecurePassword(16);
  console.log('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', password);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
  const passwordValidation = validatePasswordStrength(password);
  console.log('üìä –û—Ü–µ–Ω–∫–∞ –ø–∞—Ä–æ–ª—è:', passwordValidation.score, '/ 6');
  console.log('üìù –û—Ç–∑—ã–≤ –æ –ø–∞—Ä–æ–ª–µ:', passwordValidation.feedback.join(', '));
  
  if (!passwordValidation.isValid) {
    console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
  const { hash, salt } = createPasswordHash(password);
  console.log('üîí –•–µ—à –ø–∞—Ä–æ–ª—è —Å–æ–∑–¥–∞–Ω');
  console.log('üßÇ –°–æ–ª—å:', salt);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const response = await fetch(HASURA_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-hasura-admin-secret': HASURA_ADMIN_SECRET,
      },
      body: JSON.stringify({
        query: `
          mutation CreateAdmin($email: String!, $full_name: String!, $password_hash: String!, $password_salt: String!, $role: String!, $is_active: Boolean!, $is_email_verified: Boolean!) {
            insert_users(objects: [{
              email: $email,
              full_name: $full_name,
              password_hash: $password_hash,
              password_salt: $password_salt,
              role: $role,
              is_active: $is_active,
              is_email_verified: $is_email_verified
            }]) {
              returning {
                id
                email
                full_name
                role
                is_active
                is_email_verified
                created_at
              }
            }
          }
        `,
        variables: {
          email: adminData.email,
          full_name: adminData.full_name,
          password_hash: hash,
          password_salt: salt,
          role: adminData.role,
          is_active: adminData.is_active,
          is_email_verified: adminData.is_email_verified
        }
      }),
    });

    if (!response.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      const errorData = await response.json();
      console.log('Error:', JSON.stringify(errorData, null, 2));
      return;
    }

    const data = await response.json();
    
    if (data.errors) {
      console.log('‚ùå GraphQL –æ—à–∏–±–∫–∏:', JSON.stringify(data.errors, null, 2));
      return;
    }
    
    const admin = data.data?.insert_users?.returning?.[0];
    
    if (admin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      console.log('üìß Email:', admin.email);
      console.log('üë§ –ü–æ–ª–Ω–æ–µ –∏–º—è:', admin.full_name);
      console.log('üîë –ü–∞—Ä–æ–ª—å:', password);
      console.log('üÜî ID:', admin.id);
      console.log('üìÖ –°–æ–∑–¥–∞–Ω:', admin.created_at);
      
      console.log('\nüîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
      console.log('Email:', admin.email);
      console.log('–ü–∞—Ä–æ–ª—å:', password);
      console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!');
      
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

createNewAdmin();
